@{
    ViewData["Title"] = "Home Page";
}
@{
    List<string> options = ViewData.Model;
    string[] ports = (string [])ViewData["ports"];
}
<div>
    @foreach(string item in options) {
        string[] allInputs = item.Split(";");
        <form id=@allInputs[0]  method="post">
            <p>@allInputs[2]</p>
                  <select>
                @for(int port = 0; port < ports.Length; port++)
                {
                     <option value="@ports[port]">@ports[port]</option>
                }
        </select>
        <input type="hidden" value="@allInputs[3]">
                @for(int input = 4; input < allInputs.Length; input++) {
                    if(allInputs[input].Length >0) {
                        <input type="text" placeholder="@allInputs[input]" name="@input">
                    }
                }   
                @if(@allInputs[1] == "sendData"){
                <button onclick="sendData(@allInputs[0])" type="button">Launch</button>
                }
                @if(@allInputs[1] == "getData"){
                <button onclick="getData(@allInputs[0])" type="button">Launch</button>
                string divId = "graph" + allInputs[0];
                <div id=@divId></div>
                <button onclick="stop()" type="button">Stop data</button>
                }                  
        </form>
    }
</div>
<script
src="https://www.gstatic.com/charts/loader.js">
</script>
<script>
    google.charts.load('current',{packages:['corechart']});
    var graphData = [];
    var graphId;
    var time = 0;
    var interval = 2000;
    var stopVal = false;
    var realInterval;
    var endData;
    var ids;
    var options;

    async function sendData(id){
            var inputValuesArray = document.getElementById(id).elements;

            $(`#${id}`).addClass("pending");
            $(`#${id}`).removeClass("success error");
            let finalString = "";
            for(var index = 0; index < inputValuesArray.length-1 ;index++ ){
                if(document.getElementById(id).elements.item(index).value)
                finalString+=document.getElementById(id).elements.item(index).value +";";
            }
            let res = await fetch(`/home/execute/${id}`, {
                body: JSON.stringify({
                    execute: finalString,
                }),
                headers: {
                        'Accept': 'application/json',
                    'Content-type': 'application/json',
                },
            method:"POST",
            });
            var data = await res.json();
            $(`#${id}`).removeClass("pending");              
            if(data == "ok\r") $(`#${id}`).addClass("success");
            else {
                 $(`#${id}`).addClass("error");
            }
        }

        async function getData(id){
            if(id !== graphId) {
                time = 0;
                graphData = [];
                graphId = id;
                graphData = [["Time", "Value"]];

            }
            console.log(graphData);
            var inputValuesArray = document.getElementById(id).elements;
            let finalString = "";


            for(var index = 0; index < inputValuesArray.length-1 ;index++ ){
                if(document.getElementById(id).elements.item(index).value)
                finalString+=document.getElementById(id).elements.item(index).value +";";
            }
            stopVal = true;

            realInterval = setInterval(async() =>{
                let res = await fetch(`/home/getString/${id}`, {
                body: JSON.stringify({
                    execute: finalString,
                }),
                headers: {
                    'Accept': 'application/json',
                        'Content-type': 'application/json',
                    },
                method:"POST",
                });
                 var data = await res.json();
                 let responseData = true;
                 if (data == "err"){
                     data = Math.random()*100;
                     var graphItem = [time, data];
                     responseData = false;

                 } else{
                     //var graphItem = [data.replace("\r", ""), time];
                     var graphItem = [time, parseInt(data.replace("\r", ""))];
                 }
                 time+=interval;
                 graphData.push(graphItem);
                 google.charts.setOnLoadCallback(renderGraph(graphId, responseData));
            }, interval)
        }

        async function renderGraph(id, responseData){
            ids = id;
            endData =  google.visualization.arrayToDataTable(graphData);
            let text = "";
            if(responseData){
                text = "Data visualizer v1.0"
            } else{
                text = "Error data visualizer v1.0"
            }
            options = {
              title: text,
              hAxis: {title: 'Time'},
              vAxis: {title: 'Value'},
              legend: 'none',
              'width':750,
              'height':550
            };
            var graph = new google.visualization.LineChart(document.getElementById(`graph${id}`));
            graph.draw(endData, options);
        }

        async function stop(){
            clearInterval(realInterval);
            var graph = new google.visualization.LineChart(document.getElementById(`graph${ids}`));
            graph.draw(endData, options);
        }
</script>

